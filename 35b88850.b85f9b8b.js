(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{108:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,m=p["".concat(o,".").concat(b)]||p[b]||d[b]||l;return t?a.a.createElement(m,i(i({ref:n},s),{},{components:t})):a.a.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=b;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),l=(t(0),t(108)),o={id:"terraform_ec2",title:"Creating an EC2 instance"},i={unversionedId:"terraform_ec2",id:"terraform_ec2",isDocsHomePage:!1,title:"Creating an EC2 instance",description:"Overview",source:"@site/docs/terraform_ec2.md",slug:"/terraform_ec2",permalink:"/Infrastructure-Playbook/terraform_ec2",editUrl:"https://github.com/LBHackney-IT/Infrastructure-Playbook/edit/master/docs/terraform_ec2.md",version:"current",sidebar:"docs",previous:{title:"Github Federation to AWS",permalink:"/Infrastructure-Playbook/github_federation"},next:{title:"Monitoring a Windows EC2 instance",permalink:"/Infrastructure-Playbook/terraform_ec2_monitoring"}},c=[{value:"Overview",id:"overview",children:[]},{value:"Usage",id:"usage",children:[{value:"Required Module Variables",id:"required-module-variables",children:[]},{value:"Optional Module Variables",id:"optional-module-variables",children:[]},{value:"Module Output Variables",id:"module-output-variables",children:[]}]}],s={toc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"overview"},"Overview"),Object(l.b)("p",null,"This module deploys EC2 instances in the opionated way that we use them in Hackney. It supports the deployment of a Bastion host for external access and is also pre-configured to enable connection to AppStream."),Object(l.b)("h2",{id:"usage"},"Usage"),Object(l.b)("p",null,"Declare the module and provide the required inputs and optional inputs as needed:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-terraform"},'module "ec2s" {\n  source = "../../modules/aws-ec2-lbh/module"\n  tags          = module.tags.values\n  vpc_id        = "vpc-xxxx"\n  subnet_ids    = ["subnet-xxxxxa", "subnet-xxxxxb", "subnet-xxxxxc"]\n  ec2_instances = local.ec2_instances\n}\n')),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"ec2_instances")," is a ",Object(l.b)("inlineCode",{parentName:"p"},"map")," variable that defines the required EC2 configuration. This could be read from external YAML or JSON files, using ",Object(l.b)("inlineCode",{parentName:"p"},"yamldecode()")," or ",Object(l.b)("inlineCode",{parentName:"p"},"jsondecode()")," functions:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-terraform"},'locals {\n  ec2_instances = yamldecode(file("path/to/ec2.yml"))\n}\n')),Object(l.b)("p",null,"Alternatively, the variable can be defined inside a ",Object(l.b)("inlineCode",{parentName:"p"},"tfvars")," file or constructed dynamically. Below are some example configurations:"),Object(l.b)("p",null,"HCL"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-terraform"},'ec2_instances = {\n  "app" = {\n    "allow_appstream" = true\n\n    "ami" = "ami-0c6043f6e8a4652bc"\n\n    "ebs_block_devices" = {\n      "/dev/sdb" = 3000\n\n      "/dev/sdc" = 500\n    }\n\n    "egress_rules" = ["all-all"]\n\n    "ingress_cidr_blocks" = ["0.0.0.0/0"]\n\n    "ingress_rules" = ["http-80-tcp", "all-icmp"]\n\n    "instance_count" = 1\n\n    "instance_type" = "c4.2xlarge"\n\n    "root_block_device_volume_size" = 100\n\n    "user_data" = "#! /bin/bash echo \\"HelloWorld\\"\\n"\n  },\n  "db" = {\n    "ami" = "ami-0c6043f6e8a4652bc"\n\n    "ingress_rules" = ["http-80-tcp", "all-icmp"]\n\n    "instance_count" = 1\n\n    "instance_type" = "c4.2xlarge"\n\n    "root_block_device_volume_size" = 100\n  }\n}\n')),Object(l.b)("p",null,"YAML:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-yaml"},'---\napp:\n  # Required\n  ami: ami-0c6043f6e8a4652bc\n  # Required\n  instance_type: c4.2xlarge\n  # Required\n  root_block_device_volume_size: 100\n  # Required\n  ingress_rules:\n    - http-80-tcp\n    - all-icmp\n  # Optional - defaults to ["0.0.0.0/0"]\n  ingress_cidr_blocks:\n    - 0.0.0.0/0\n  # Optional - defaults to ["all-all"]\n  egress_rules:\n    - all-all\n  # Optional - defaults to false\n  allow_appstream: true\n  # Optional defaults to []\n  ebs_block_devices:\n    /dev/sdb: 3000\n    /dev/sdc: 500\n  # Optional - defaults to empty  -\n  user_data: >\n        #! /bin/bash\n        echo "HelloWorld"\n\n\ndb:\n  # Required\n  ami: ami-0c6043f6e8a4652bc\n  # Required\n  instance_type: c4.2xlarge\n\n  # Required\n  root_block_device_volume_size: 100\n  # Required\n  ingress_rules:\n    - http-80-tcp\n    - all-icmp\n')),Object(l.b)("p",null,"JSON"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-json"},'{\n  "app": {\n    "allow_appstream": true,\n    "ami": "ami-0c6043f6e8a4652bc",\n    "ebs_block_devices": {\n      "/dev/sdb": 3000,\n      "/dev/sdc": 500\n    },\n    "egress_rules": [\n      "all-all"\n    ],\n    "ingress_cidr_blocks": [\n      "0.0.0.0/0"\n    ],\n    "ingress_rules": [\n      "http-80-tcp",\n      "all-icmp"\n    ],\n    "instance_count": 1,\n    "instance_type": "c4.2xlarge",\n    "root_block_device_volume_size": 100,\n    "user_data": "#! /bin/bash echo \\"HelloWorld\\"\\n"\n  },\n  "db": {\n    "ami": "ami-0c6043f6e8a4652bc",\n    "ingress_rules": [\n      "http-80-tcp",\n      "all-icmp"\n    ],\n    "instance_count": 1,\n    "instance_type": "c4.2xlarge",\n    "root_block_device_volume_size": 100\n  }\n}\n')),Object(l.b)("h3",{id:"required-module-variables"},"Required Module Variables"),Object(l.b)("p",null,"See ",Object(l.b)("inlineCode",{parentName:"p"},"01-inputs-required.tf")),Object(l.b)("h3",{id:"optional-module-variables"},"Optional Module Variables"),Object(l.b)("p",null,"See ",Object(l.b)("inlineCode",{parentName:"p"},"02-inputs-optional.tf")),Object(l.b)("h3",{id:"module-output-variables"},"Module Output Variables"),Object(l.b)("p",null,"See ",Object(l.b)("inlineCode",{parentName:"p"},"99-outputs.tf")))}u.isMDXComponent=!0}}]);