(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{123:function(e,s,t){"use strict";t.r(s),t.d(s,"frontMatter",(function(){return i})),t.d(s,"metadata",(function(){return a})),t.d(s,"toc",(function(){return c})),t.d(s,"default",(function(){return l}));var r=t(3),n=t(7),o=(t(0),t(137)),i={id:"resources",title:"Resources"},a={unversionedId:"resources",id:"resources",isDocsHomePage:!1,title:"Resources",description:"MUST Avoid Actions \u2014 Think About Resources",source:"@site/docs/resources.md",slug:"/resources",permalink:"/Infrastructure-Playbook/resources",editUrl:"https://github.com/LBHackney-IT/Infrastructure-Playbook/edit/master/docs/resources.md",version:"current"},c=[{value:"MUST Avoid Actions \u2014 Think About Resources",id:"must-avoid-actions--think-about-resources",children:[]},{value:"SHOULD Model complete business processes",id:"should-model-complete-business-processes",children:[]},{value:"SHOULD Define <em>useful</em> resources",id:"should-define-useful-resources",children:[]},{value:"MUST Keep URLs Verb-Free",id:"must-keep-urls-verb-free",children:[]},{value:"MUST Use Domain-Specific Resource Names",id:"must-use-domain-specific-resource-names",children:[]},{value:"MUST Use URL-friendly Resource Identifiers: [a-zA-Z0-9:._-]*",id:"must-use-url-friendly-resource-identifiers-a-za-z0-9_-",children:[]},{value:"MUST Identify resources and Sub-Resources via Path Segments",id:"must-identify-resources-and-sub-resources-via-path-segments",children:[]},{value:"SHOULD Consider Use of Nested URLs",id:"should-consider-use-of-nested-urls",children:[]},{value:"SHOULD Limit number of Resource types",id:"should-limit-number-of-resource-types",children:[]},{value:"SHOULD Limit number of Sub-Resource Levels",id:"should-limit-number-of-sub-resource-levels",children:[]}],u={toc:c};function l(e){var s=e.components,t=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,t,{components:s,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"must-avoid-actions--think-about-resources"},"MUST Avoid Actions \u2014 Think About Resources"),Object(o.b)("p",null,"REST is all about your resources, so consider the domain entities that take part in web service interaction, and aim to model your API around these using the standard HTTP methods as operation indicators. For instance, if an application has to lock articles explicitly so that only one user may edit them, create an article lock with PUT or POST instead of using a lock action."),Object(o.b)("p",null,"Request:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-http"},"PUT /article-locks/{article-id}\n")),Object(o.b)("p",null,"The added benefit is that you already have a service for browsing and filtering article locks."),Object(o.b)("h2",{id:"should-model-complete-business-processes"},"SHOULD Model complete business processes"),Object(o.b)("p",null,"An API should contain the complete business processes containing all resources representing the process. This enables clients to understand the business process, foster a consistent design of the business process, allow for synergies from description and implementation perspective, and eliminates implicit invisible dependencies between APIs."),Object(o.b)("p",null,"In addition, it prevents services from being designed as thin wrappers around databases, which normally tends to shift business logic to the clients."),Object(o.b)("h2",{id:"should-define-useful-resources"},"SHOULD Define ",Object(o.b)("em",{parentName:"h2"},"useful")," resources"),Object(o.b)("p",null,"As a rule of thumb resources should be defined to cover 90% of all its client\u2019s use cases. A ",Object(o.b)("em",{parentName:"p"},"useful")," resource should contain as much information as necessary, but as little as possible. A great way to support the last 10% is to allow clients to specify their needs for more/less information by supporting filtering and embedding."),Object(o.b)("h2",{id:"must-keep-urls-verb-free"},"MUST Keep URLs Verb-Free"),Object(o.b)("p",null,"The API describes resources, so the only place where actions should appear is in the HTTP methods. In URLs, use only nouns. Instead of thinking of actions (verbs), it\u2019s often helpful to think about putting a message in a letter box: e.g., instead of having the verb ",Object(o.b)("em",{parentName:"p"},"cancel")," in the url, think of sending a message to cancel an order to the ",Object(o.b)("em",{parentName:"p"},"cancellations")," letter box on the server side."),Object(o.b)("h2",{id:"must-use-domain-specific-resource-names"},"MUST Use Domain-Specific Resource Names"),Object(o.b)("p",null,'API resources represent elements of the application\u2019s domain model. Using domain-specific nomenclature for resource names helps developers to understand the functionality and basic semantics of your resources. It also reduces the need for further documentation outside the API definition. For example, "sales-order-items" is superior to "order-items" in that it clearly indicates which business object it represents. Along these lines, "items" is too general.'),Object(o.b)("h2",{id:"must-use-url-friendly-resource-identifiers-a-za-z0-9_-"},"MUST Use URL-friendly Resource Identifiers: ","[","a-zA-Z0-9:.","_","-","]","*"),Object(o.b)("p",null,"To simplify encoding of resource IDs in URLs, their representation must only consist of ASCII strings of letters, numbers, underscore, minus, colon, and period."),Object(o.b)("h2",{id:"must-identify-resources-and-sub-resources-via-path-segments"},"MUST Identify resources and Sub-Resources via Path Segments"),Object(o.b)("p",null,"Some API resources may contain or reference sub-resources. Embedded sub-resources, which are not top-level resources, are parts of a higher-level resource and cannot be used outside of its scope. Sub-resources should be referenced by their name and identifier in the path segments."),Object(o.b)("p",null,"Composite identifiers must not contain ",Object(o.b)("inlineCode",{parentName:"p"},"/")," as a separator. In order to improve the consumer experience, you should aim for intuitively understandable URLs, where each sub-path is a valid reference to a resource or a set of resources. For example, if ",Object(o.b)("inlineCode",{parentName:"p"},"/customers/12ev123bv12v/addresses/DE_100100101")," is a valid path of your API, then ",Object(o.b)("inlineCode",{parentName:"p"},"/customers/12ev123bv12v/addresses"),", ",Object(o.b)("inlineCode",{parentName:"p"}," customers/12ev123bv12v")," and ",Object(o.b)("inlineCode",{parentName:"p"},"/customers")," must be valid as well in principle."),Object(o.b)("p",null,"Basic URL structure:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-http"},"/{resources}/[resource-id]/{sub-resources}/[sub-resource-id]\n/{resources}/[partial-id-1][separator][partial-id-2]\n")),Object(o.b)("p",null,"Examples:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-http"},"/carts/1681e6b88ec1/items\n/carts/1681e6b88ec1/items/1\n/customers/12ev123bv12v/addresses/DE_100100101\n/content/images/9cacb4d8\n")),Object(o.b)("h2",{id:"should-consider-use-of-nested-urls"},"SHOULD Consider Use of Nested URLs"),Object(o.b)("p",null,"If a sub-resource is only accessible via its parent resource and may not exists without parent resource, consider using a nested URL structure, for instance:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-http"},"/carts/1681e6b88ec1/cart-items/1\n")),Object(o.b)("p",null,"However, if the resource can be accessed directly via its unique id, then the API should expose it as a top-level resource. For example, customer has a collection for sales orders; however, sales orders have globally unique id and some services may choose to access the orders directly, for instance:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-http"},"/customers/1681e6b88ec1\n/sales-orders/5273gh3k525a\n")),Object(o.b)("h2",{id:"should-limit-number-of-resource-types"},"SHOULD Limit number of Resource types"),Object(o.b)("p",null,'To keep maintenance and service evolution manageable, we should follow "functional segmentation" and "separation of concern" design principles and do not mix different business functionalities in same API definition. In practice this means that the number of resource types exposed via an API should be limited. In this context a resource type is defined as a set of highly related resources such as a collection, its members and any direct sub-resources.'),Object(o.b)("p",null,"For example, the resources below would be counted as three resource types, one for customers, one for the addresses, and one for the customers' related addresses:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-http"},"/customers\n/customers/{id}\n/customers/{id}/preferences\n/customers/{id}/addresses\n/customers/{id}/addresses/{addr}\n/addresses\n/addresses/{addr}\n")),Object(o.b)("p",null,"Note that:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"We consider ",Object(o.b)("inlineCode",{parentName:"p"},"/customers/{id}/preferences")," part of the ",Object(o.b)("inlineCode",{parentName:"p"},"/customers")," resource type because it has a one-to-one relation to the customer without an additional identifier.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"We consider ",Object(o.b)("inlineCode",{parentName:"p"},"/customers")," and ",Object(o.b)("inlineCode",{parentName:"p"},"/customers/{id}/addresses")," as separate resource types because ",Object(o.b)("inlineCode",{parentName:"p"},"/customers/{id}/addresses/{addr}")," also exists with an additional identifier for the address.")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"We consider ",Object(o.b)("inlineCode",{parentName:"p"},"/addresses")," and ",Object(o.b)("inlineCode",{parentName:"p"},"/customers/{id}/addresses")," as separate resource types because there\u2019s no reliable way to be sure they are the same."))),Object(o.b)("p",null,"Given this definition, our experience is that well defined APIs involve no more than 4 to 8 resource types. There may be exceptions with more complex business domains that require more resources, but you should first check if you can split them into separate subdomains with distinct APIs."),Object(o.b)("p",null,"Nevertheless one API should hold all necessary resources to model complete business processes helping clients to understand these flows."),Object(o.b)("h2",{id:"should-limit-number-of-sub-resource-levels"},"SHOULD Limit number of Sub-Resource Levels"),Object(o.b)("p",null,'There are main resources (with root url paths) and sub-resources (or "nested" resources with non-root urls paths). Use sub-resources if their life cycle is (loosely) coupled to the main resource, i.e. the main resource works as collection resource of the subresource entities. You should use <= 3 sub-resource (nesting) levels\u2009\u2014\u2009more levels increase API complexity and url path length. (Remember, some popular web browsers do not support URLs of more than 2000 characters)'))}l.isMDXComponent=!0},137:function(e,s,t){"use strict";t.d(s,"a",(function(){return d})),t.d(s,"b",(function(){return m}));var r=t(0),n=t.n(r);function o(e,s,t){return s in e?Object.defineProperty(e,s,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[s]=t,e}function i(e,s){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);s&&(r=r.filter((function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var s=1;s<arguments.length;s++){var t=null!=arguments[s]?arguments[s]:{};s%2?i(Object(t),!0).forEach((function(s){o(e,s,t[s])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(s){Object.defineProperty(e,s,Object.getOwnPropertyDescriptor(t,s))}))}return e}function c(e,s){if(null==e)return{};var t,r,n=function(e,s){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],s.indexOf(t)>=0||(n[t]=e[t]);return n}(e,s);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],s.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=n.a.createContext({}),l=function(e){var s=n.a.useContext(u),t=s;return e&&(t="function"==typeof e?e(s):a(a({},s),e)),t},d=function(e){var s=l(e.components);return n.a.createElement(u.Provider,{value:s},e.children)},b={inlineCode:"code",wrapper:function(e){var s=e.children;return n.a.createElement(n.a.Fragment,{},s)}},p=n.a.forwardRef((function(e,s){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),p=r,m=d["".concat(i,".").concat(p)]||d[p]||b[p]||o;return t?n.a.createElement(m,a(a({ref:s},u),{},{components:t})):n.a.createElement(m,a({ref:s},u))}));function m(e,s){var t=arguments,r=s&&s.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var a={};for(var c in s)hasOwnProperty.call(s,c)&&(a[c]=s[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var u=2;u<o;u++)i[u]=t[u];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);