(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{112:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,d=p["".concat(i,".").concat(m)]||p[m]||b[m]||o;return t?a.a.createElement(d,c(c({ref:n},l),{},{components:t})):a.a.createElement(d,c({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(3),a=t(7),o=(t(0),t(112)),i={id:"naming_conventions",title:"Naming Conventions"},c={unversionedId:"naming_conventions",id:"naming_conventions",isDocsHomePage:!1,title:"Naming Conventions",description:"This is a work in progress, with some sections to be completed. Please check back for updates, or contact us with suggestions.",source:"@site/docs/naming_conventions.md",slug:"/naming_conventions",permalink:"/Infrastructure-Playbook/naming_conventions",editUrl:"https://github.com/LBHackney-IT/Infrastructure-Playbook/edit/master/docs/naming_conventions.md",version:"current",sidebar:"docs",previous:{title:"The Hub",permalink:"/Infrastructure-Playbook/hub"},next:{title:"Services we provide",permalink:"/Infrastructure-Playbook/services_we_provide"}},s=[{value:"General principles",id:"general-principles",children:[]},{value:"AWS resources",id:"aws-resources",children:[{value:"Accounts",id:"accounts",children:[]},{value:"EC2 instances",id:"ec2-instances",children:[]}]},{value:"Work in progress",id:"work-in-progress",children:[]}],l={toc:s};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"This is a work in progress, with some sections to be completed. Please check back for updates, or ",Object(o.b)("a",{parentName:"em",href:"docs/contact_us.md"},"contact us")," with suggestions.")),Object(o.b)("h2",{id:"general-principles"},"General principles"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Elements are sequenced as application-environment-resource, such as ",Object(o.b)("inlineCode",{parentName:"li"},"xpress-staging-vpc")),Object(o.b)("li",{parentName:"ul"},"Hyphen is the delimiter"),Object(o.b)("li",{parentName:"ul"},"In the rare event that a hyphen is not allowed, use ",Object(o.b)("inlineCode",{parentName:"li"},"PascalCase")),Object(o.b)("li",{parentName:"ul"},"Do not use version names; add as a tag if absolutely required ")),Object(o.b)("h2",{id:"aws-resources"},"AWS resources"),Object(o.b)("h3",{id:"accounts"},"Accounts"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Application-Environment, e.g. Academy-Production"),Object(o.b)("li",{parentName:"ul"},"Initial letters are CAPITALS")),Object(o.b)("h3",{id:"ec2-instances"},"EC2 instances"),Object(o.b)("p",null,"When creating an EC2, you must give it a human-readable name via a tag. The name tag is auto-generated when the EC2 instance is created via Terraform (using the EC2 module in the infrastructure repo). This should be, as a minimum, application-environment; for example:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"xpress-app-staging"),Object(o.b)("li",{parentName:"ul"},"academy-db-production"),Object(o.b)("li",{parentName:"ul"},"managearrears-temp-db-staging")),Object(o.b)("p",null,"Note: Because names are generated automatically when the instance is created, all characters are converted to lower case by default in the module. "),Object(o.b)("h2",{id:"work-in-progress"},"Work in progress"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"The following conventions are to be agreed:")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"AWS networking"),Object(o.b)("li",{parentName:"ul"},"GitHub repos and CI"),Object(o.b)("li",{parentName:"ul"},"File types for Python, Javascript, .NET and Go"),Object(o.b)("li",{parentName:"ul"},"Terraform modules and resources")),Object(o.b)("p",null,"For now, please try to follow the general examples of other names in the repo, or post in #ask-devops on Slack."))}u.isMDXComponent=!0}}]);